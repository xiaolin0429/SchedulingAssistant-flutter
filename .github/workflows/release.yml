name: 应用发布

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发，例如v1.0.0

# 添加工作流权限
permissions:
  contents: write  # 允许创建Release和上传资源
  issues: write    # 允许创建和更新Issues
  pull-requests: write # 允许创建和更新PR

jobs:
  validate:
    name: 验证版本
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: 检出代码
        uses: actions/checkout@5126516654c75f76bca1de45dd82a3006d8890f9 # v4.1.1
        
      - name: 检查版本号匹配
        id: check
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PUBSPEC_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
          echo "TAG_VERSION=$TAG_VERSION"
          echo "PUBSPEC_VERSION=$PUBSPEC_VERSION"
          
          # 使用更安全的版本比较方法
          if [ "$TAG_VERSION" != "$PUBSPEC_VERSION" ]; then
            echo "::error::标签版本 $TAG_VERSION 与pubspec.yaml中的版本 $PUBSPEC_VERSION 不匹配!"
            echo "请确保发布标签版本与pubspec.yaml中的版本一致"
            exit 1
          fi
          
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "✅ 版本号检查通过: $TAG_VERSION"
          
  create-release:
    name: 创建GitHub发布
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@5126516654c75f76bca1de45dd82a3006d8890f9 # v4.1.1
        with:
          fetch-depth: 0
      
      - name: 获取变更日志
        id: changelog
        run: |
          # 尝试从CHANGELOG.md获取变更日志内容，若无则使用提交记录
          CHANGELOG=""
          VERSION=${{ needs.validate.outputs.version }}
          
          if [ -f "CHANGELOG.md" ]; then
            # 尝试提取当前版本的变更日志
            CHANGELOG=$(awk -v ver="## [$VERSION]" '/^## \[/{flag=0} $0~ver{flag=1; next} flag{print}' CHANGELOG.md | sed '/^## \[/,$d')
          fi
          
          # 如果没有找到变更日志，则使用提交历史
          if [ -z "$CHANGELOG" ]; then
            echo "未找到版本变更日志，使用提交历史..."
            # 尝试找到上一个标签，如果没有则从头开始
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -z "$PREV_TAG" ]; then
              echo "没有找到上一个标签，使用全部提交历史..."
              CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -n 50)
            else
              CHANGELOG=$(git log --pretty=format:"- %s" --no-merges ${PREV_TAG}..HEAD)
            fi
          fi
          
          # 添加自动生成的更新时间和版本信息
          FINAL_CHANGELOG="## 排班助手 v$VERSION 发布说明\n\n**发布日期:** $(date +"%Y-%m-%d")\n\n### 更新内容\n\n$CHANGELOG\n\n### 安装说明\n- 点击下方APK下载安装\n- 如遇到安装问题，请卸载旧版本后重新安装"
          
          # 将变更日志内容保存到文件，以便下一步使用
          echo -e "$FINAL_CHANGELOG" > changelog.txt
          cat changelog.txt
          
      - name: 创建Release
        uses: softprops/action-gh-release@ab50eebb6488051c6788d97fa95232267c6a4e23 # v1
        with:
          name: 排班助手 v${{ needs.validate.outputs.version }}
          body_path: changelog.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 